//
// MethodHandler.h
//
// $Id: //poco/1.4/RemotingNG/include/Poco/RemotingNG/MethodHandler.h#1 $
//
// Library: RemotingNG
// Package: ORB
// Module:  MethodHandler
//
// Definition of the MethodHandler class.
//
// Copyright (c) 2006-2011, Applied Informatics Software Engineering GmbH.
// All rights reserved.
//
// This is unpublished proprietary source code of Applied Informatics.
// The contents of this file may not be disclosed to third parties, 
// copied or duplicated in any form, in whole or in part.
//


#ifndef RemotingNG_MethodHandler_INCLUDED
#define RemotingNG_MethodHandler_INCLUDED


#include "Poco/RemotingNG/RemotingNG.h"
#include "Poco/RemotingNG/RemoteObject.h"
#include "Poco/RefCountedObject.h"
#include "Poco/AutoPtr.h"


namespace Poco {
namespace RemotingNG {


class ServerTransport;
class Deserializer;


class RemotingNG_API MethodHandler: public Poco::RefCountedObject
	/// A MethodHandler deserializes and forwards a remote call to the service object,
	/// via the RemoteObject.
	///
	/// MethodHandler classes are generated by the RemotingNG code generator,
	/// together with the Skeleton class, which manages them.
{
public:
	typedef Poco::AutoPtr<MethodHandler> Ptr;

	MethodHandler();
		/// Creates a MethodHandler.

	virtual ~MethodHandler();
		/// Destroys the MethodHandler.

	virtual void invoke(ServerTransport& transport, Deserializer& deserializer, RemoteObject::Ptr pRemoteObject) = 0;
		/// Deserializes the incoming request using the given Deserializer and
		/// invokes the corresponding method on the service object, via the RemoteObject.
		///
		/// After the invocation, serializes the return value and output parameters (or exception) of the
		/// method using the ServerTransport's Serializer.

private:
	MethodHandler(const MethodHandler&);
	MethodHandler& operator = (const MethodHandler&);
};


} } // namespace Poco::RemotingNG


#endif // RemotingNG_MethodHandler_INCLUDED
